<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="today.meevote.domain.schedule.dao.ScheduleDao">

	<select id="isExistByEmail" resultType="boolean">
        SELECT COUNT(*) 
        FROM member 
        WHERE email = #{email}
    </select>
    
    <select id="isCategoryExist" resultType="boolean">
	    SELECT COUNT(*)
		FROM schedule_category
		WHERE schedule_category_id =#{categoryId}
	</select>

	<insert id="createPersonalSchedule" parameterType="map">
	    INSERT INTO Schedule (
	        schedule_id,
	        name,
	        description,
	        is_group,
	        schedule_category_id,
	        start_date,
	        end_date
	    ) VALUES (
			seq_schedule.NEXTVAL,
	        #{dto.name},
	        #{dto.description, jdbcType=VARCHAR},
	        0,
	        #{dto.scheduleCategoryId},
	        TO_DATE(#{dto.startDate}, 'YYYY-MM-DD HH24:MI'),
	        TO_DATE(#{dto.endDate}, 'YYYY-MM-DD HH24:MI')
	    )
		<selectKey keyProperty="id" resultType="long" order="AFTER">
			SELECT seq_schedule.CURRVAL FROM DUAL
		</selectKey>
	</insert>

    
    <insert id="createMemberSchedule" parameterType="map">
        INSERT INTO member_schedule (
            email,
            schedule_id,
            is_owner
        ) VALUES (
            #{email},
            #{scheduleId},
            1 <!-- isOwner : 1로 설정 -->
        )
    </insert>

	<select id="isExistScheduleByInfo" resultType="boolean">
		SELECT COUNT(*)
		FROM member_schedule
		WHERE schedule_id = #{scheduleId}
		  AND email = #{email}
		  AND is_owner = 1
	</select>


	<delete id="deletePersonalSchedule" parameterType="map">
	    DELETE FROM schedule
	    WHERE schedule_id = #{scheduleId}
	</delete>


	<select id="getMyScheduleList" resultType="today.meevote.domain.schedule.dto.response.GetMyScheduleListDto">
		SELECT
			s.schedule_id,
			s.name,
			c.schedule_category_id,
			c.category_name,
			c.color,
			s.is_group,
			TO_CHAR(s.start_date, 'YYYY-MM-DD HH24:MI') AS startDate,
			TO_CHAR(s.end_date, 'YYYY-MM-DD HH24:MI') AS endDate,
			p.place_name
		FROM
			member_schedule ms
			JOIN schedule s ON ms.schedule_id = s.schedule_id
			JOIN schedule_category c ON s.schedule_category_id = c.schedule_category_id
			LEFT JOIN schedule_place p ON ms.schedule_id = p.schedule_id
		WHERE
			ms.email = #{email}
			<if test="isGroup != null">
				AND s.is_group = #{isGroup}
			</if>
			AND TO_CHAR(s.start_date, 'YYYY') = #{year}
			AND TO_CHAR(s.start_date, 'MM') = #{month}
			AND ((s.is_group = 1 AND p.schedule_id IS NOT NULL) OR s.is_group = 0)
	</select>

	<select id="getCategory" resultType="today.meevote.domain.schedule.dto.response.GetScheduleCategoryDto">
		SELECT
			schedule_category_id,
			category_name,
			color
		FROM schedule_category
	</select>

	<insert id="createSchedulePlace" parameterType="map">
		INSERT INTO schedule_place
		(
			schedule_id,
			place_name,
		   	lat,
		    lng
		)
		VALUES
		(
			#{id},
		 	#{dto.placeName},
		 	#{dto.placeLatitude},
		 	#{dto.placeLongitude}
		)
	</insert>

	<select id="isExistGroupMember" parameterType="today.meevote.domain.schedule.dto.request.CreateGroupScheduleDto" resultType="int">
		SELECT COUNT(*) FROM member
		<where>
			<if test="inviteEmailList != null and !inviteEmailList.isEmpty()">
				email IN
				<foreach collection="inviteEmailList" item="email" index="index" open="(" separator="," close=")">
					#{email}
				</foreach>
			</if>
		</where>
	</select>

	<insert id="createGroupSchedule" parameterType="map">
		INSERT INTO Schedule (
			schedule_id,
			name,
			description,
			is_group,
			schedule_category_id,
			start_date,
			end_date,
			vote_deadline
		)
		SELECT
			seq_schedule.NEXTVAL,
			#{dto.name},
			#{dto.description, jdbcType=VARCHAR},
			1,
			#{dto.scheduleCategoryId},
			TO_DATE(#{dto.startDate}, 'YYYY-MM-DD HH24:MI'),
			TO_DATE(#{dto.endDate}, 'YYYY-MM-DD HH24:MI'),
			TO_DATE(#{dto.voteDeadline}, 'YYYY-MM-DD HH24:MI')
		FROM DUAL
		<selectKey keyProperty="id" resultType="long" order="AFTER">
			SELECT seq_schedule.CURRVAL FROM DUAL
		</selectKey>
	</insert>

	<insert id="createGroupMemberSchedule">
		INSERT ALL
		<foreach collection="dto.inviteEmailList" item="email" separator=" ">
			INTO member_schedule (schedule_id, email, is_owner)
			VALUES (#{id}, #{email}, 0)
		</foreach>
		<!-- 모임장용 insert -->
		INTO member_schedule (schedule_id, email, is_owner)
		VALUES (#{id}, #{ownerEmail}, 1)
		SELECT * FROM DUAL
	</insert>

	<select id="getScheduleDetailInfoDto">
		SELECT
			s.schedule_id,
			sc.schedule_category_id,
			sc.category_name,
			sc.color,
			s.name,
			s.description,
			TO_CHAR(s.start_date, 'YYYY-MM-DD HH24:MI') AS startDate,
			TO_CHAR(s.end_date, 'YYYY-MM-DD HH24:MI') AS endDate,
			s.is_group,
			sp.place_name,
			sp.lat,
			sp.lng,
			ms.is_owner AS isRequesterOwner
		FROM
			member_schedule ms
				JOIN schedule s ON ms.schedule_id = s.schedule_id
				JOIN schedule_category sc ON s.schedule_category_id = sc.schedule_category_id
				LEFT JOIN schedule_place sp ON s.schedule_id = sp.schedule_id
		WHERE
			ms.email = #{email}
		  AND s.schedule_id = #{scheduleId}
		  AND (
		      s.is_group = 0 OR
		      (s.is_group = 1 AND sp.schedule_id IS NOT NULL))
	</select>

	<select id="getScheduleMemberDtoList">
		SELECT
			m.email,
			m.name,
			m.address,
			m.img_src,
			ms.is_owner,
			dp.place_name AS departure_place_name,
			dp.lat AS departure_lat,
			dp.lng AS departure_lng
		FROM
			member m
				JOIN member_schedule ms ON m.email = ms.email
				LEFT JOIN departure_place dp ON ms.email = dp.email AND ms.schedule_id = dp.schedule_id
		WHERE ms.schedule_id = #{scheduleId}
		ORDER BY ms.is_owner DESC
	</select>

	<select id="getFutureScheduleList">
		SELECT
			s.schedule_id,
			s.name,
			sc.category_name,
			sc.color,
			TO_CHAR(s.start_date, 'YYYY-MM-DD HH24:MI') AS startDate,
			sp.place_name,
			s.is_group
		FROM
			member_schedule ms
				JOIN schedule s ON ms.schedule_id = s.schedule_id
				JOIN schedule_category sc ON s.schedule_category_id = sc.schedule_category_id
				LEFT JOIN schedule_place sp ON s.schedule_id = sp.schedule_id
		WHERE
			ms.email = #{email}
			AND (
				(s.is_group = 0)
				OR (s.is_group = 1 AND sp.schedule_id IS NOT NULL)
			AND s.start_date &gt; CURRENT_DATE  -- 모임 시작일은 현재 시각보다 미래
		ORDER BY
			s.start_date ASC,  -- 가장 가까운 미래 순서로 정렬하기~
			s.name ASC
	</select>

	<select id="isExistGroupMemberByInfo" resultType="boolean">
		SELECT COUNT(*)
		FROM member_schedule ms
		    JOIN schedule s
		        ON ms.schedule_id = s.schedule_id
		WHERE ms.schedule_id = #{scheduleId}
		  AND ms.email = #{email}
		  AND ms.is_owner = 0
		  AND s.is_group = 1
	</select>

	<delete id="outGroupSchedule" parameterType="map">
		DELETE FROM member_schedule
		WHERE schedule_id = #{scheduleId}
		  AND email = #{email}
		  AND is_owner = 0
	</delete>

	<select id="getPastScheduleList" parameterType="map">
		SELECT
			s.schedule_id,
			s.name,
			sc.category_name,
			sc.color,
			TO_CHAR(s.start_date, 'YYYY-MM-DD HH24:MI') AS startDate,
			sp.place_name,
			s.is_group
		FROM
		(
			SELECT
				ROW_NUMBER() OVER (ORDER BY s.start_date DESC, s.name ASC) AS rnum,
				s.schedule_id,
				s.name,
				s.schedule_category_id,
				s.start_date,
				s.is_group,
				s.vote_deadline
			FROM member_schedule ms
			JOIN schedule s ON ms.schedule_id = s.schedule_id
			WHERE
				ms.email = #{email}
			AND s.end_date &lt; CURRENT_DATE
			<if test="categoryId != 0">
				AND s.schedule_category_id = #{categoryId}
			</if>
			<if test="keyword != null and keyword != ''">
				AND s.name LIKE '%' || #{keyword} || '%'
			</if>
		) s
		JOIN schedule_category sc ON s.schedule_category_id = sc.schedule_category_id
		LEFT JOIN schedule_place sp ON s.schedule_id = sp.schedule_id
		WHERE
			(s.rnum BETWEEN #{pageable.offset} + 1 AND #{pageable.offset} + #{pageable.pageSize})
		AND (
			(s.is_group = 0)
			OR (s.is_group = 1 AND sp.schedule_id IS NOT NULL))
		ORDER BY s.rnum
	</select>

	<select id="countPastScheduleList" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM schedule
		WHERE end_date &lt; CURRENT_DATE
		<if test="categoryId != 0">
			AND schedule_category_id = #{categoryId}
		</if>
		<if test="keyword != null and keyword != ''">
			AND name LIKE '%' || #{keyword} || '%'
		</if>
	</select>


</mapper>